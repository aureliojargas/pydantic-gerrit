# generated by datamodel-codegen:
#   filename:  /workspaces/pydantic-gerrit/schemas/v3_12/../../schemas/v3_12/labels.json
#   timestamp: 2025-09-16T20:49:32+00:00

from __future__ import annotations

from enum import Enum
from typing import Optional

from pydantic import BaseModel, Field


class Function(Enum):
    """
    The function used for label values
    """

    MaxWithBlock = 'MaxWithBlock'
    MaxNoBlock = 'MaxNoBlock'
    NoBlock = 'NoBlock'
    NoOp = 'NoOp'
    PatchSetLock = 'PatchSetLock'


class LabelInfo(BaseModel):
    """
    Information about a review label
    """

    function: Optional[Function] = Field(
        None, description='The function used for label values'
    )
    default_value: Optional[int] = Field(
        None, description='The default value for the label'
    )
    values: Optional[dict[str, str]] = Field(
        None,
        description='Maps the vote values (-2, -1, 0, +1, +2) to their descriptions',
    )
    optional: Optional[bool] = Field(None, description='Whether the label is optional')
    copy_any_score: Optional[bool] = Field(
        None,
        description='Whether all scores for this label should be copied forward on rebase',
    )
    copy_min_score: Optional[int] = Field(
        None, description='Minimum score needed to copy votes forward'
    )
    copy_max_score: Optional[int] = Field(
        None, description='Maximum score allowed to copy votes forward'
    )
    can_override: Optional[bool] = Field(
        None, description='Whether the label can be overridden'
    )
    blocks: Optional[dict[str, str]] = Field(
        None, description='List of labels that are blocked by this label'
    )
