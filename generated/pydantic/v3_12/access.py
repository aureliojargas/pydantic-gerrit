# generated by datamodel-codegen:
#   filename:  /workspaces/pydantic-gerrit/schemas/v3_12/../../schemas/v3_12/access.json
#   timestamp: 2025-09-16T21:42:27+00:00

from __future__ import annotations

from enum import Enum
from typing import Any

from pydantic import BaseModel, Field, RootModel


class Action(Enum):
    """
    Action of this rule
    """

    ALLOW = 'ALLOW'
    DENY = 'DENY'
    BLOCK = 'BLOCK'
    INTERACTIVE = 'INTERACTIVE'
    BATCH = 'BATCH'


class Rules(BaseModel):
    """
    Rule definition keyed by group UUID
    """

    action: Action | None = Field(None, description='Action of this rule')
    force: bool | None = Field(None, description='Whether this rule is forcing the action')
    min: int | None = Field(None, description='Minimum value for range permission')
    max: int | None = Field(None, description='Maximum value for range permission')


class Permissions(BaseModel):
    """
    Permission definition
    """

    rules: dict[str, Rules] | None = Field(None, description='Rules for this permission')
    label: str | None = Field(None, description='Name of the label if this is a label permission')
    exclusive: bool | None = Field(None, description='Whether this permission is exclusive')


class Options(BaseModel):
    """
    Group options
    """

    visible_to_all: bool | None = Field(None, description='Whether the group is visible to all users')


class Groups(BaseModel):
    """
    Group information
    """

    url: str | None = Field(None, description='URL to the group')
    options: Options | None = Field(None, description='Group options')
    description: str | None = Field(None, description='Description of the group')


class Local(BaseModel):
    """
    Access section keyed by ref pattern
    """

    permissions: dict[str, Permissions] | None = Field(None, description='Permissions in this section')
    groups: dict[str, Groups] | None = Field(None, description='Groups used in the access section')


class WebLinkInfo(RootModel[Any]):
    root: Any


class InheritsFrom(BaseModel):
    """
    Project from which these access rights are inherited
    """

    id: str | None = Field(None, description='The identifier of the project')
    description: str | None = Field(None, description='A description of the project')
    web_links: list[WebLinkInfo] | None = Field(None, description='Links to the project in external systems')


class AccessRightsInfo(BaseModel):
    """
    Access rights information for projects
    """

    revision: str | None = Field(
        None, description='Configuration revision as base64 encoded SHA1 of the refs/meta/config branch'
    )
    inheritsFrom: InheritsFrom | None = Field(None, description='Project from which these access rights are inherited')
    local: dict[str, Local] | None = Field(None, description='Access sections for this project')
