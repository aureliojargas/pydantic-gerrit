# generated by datamodel-codegen:
#   filename:  schemas/v3_12/access.json
#   timestamp: 2025-09-15T22:05:04+00:00

from __future__ import annotations

from enum import Enum
from typing import Optional

from pydantic import BaseModel, Field


class WebLink(BaseModel):
    name: Optional[str] = Field(None, description='The name of the link')
    url: Optional[str] = Field(None, description='The URL of the link')
    target: Optional[str] = Field(None, description='The target of the link')


class InheritsFrom(BaseModel):
    """
    Project from which these access rights are inherited
    """

    id: Optional[str] = Field(None, description='The identifier of the project')
    description: Optional[str] = Field(None, description='A description of the project')
    web_links: Optional[list[WebLink]] = Field(
        None, description='Links to the project in external systems'
    )


class Action(Enum):
    """
    Action of this rule
    """

    ALLOW = 'ALLOW'
    DENY = 'DENY'
    BLOCK = 'BLOCK'
    INTERACTIVE = 'INTERACTIVE'
    BATCH = 'BATCH'


class Rules(BaseModel):
    """
    Rule definition keyed by group UUID
    """

    action: Optional[Action] = Field(None, description='Action of this rule')
    force: Optional[bool] = Field(
        None, description='Whether this rule is forcing the action'
    )
    min: Optional[int] = Field(None, description='Minimum value for range permission')
    max: Optional[int] = Field(None, description='Maximum value for range permission')


class Permissions(BaseModel):
    """
    Permission definition
    """

    rules: Optional[dict[str, Rules]] = Field(
        None, description='Rules for this permission'
    )
    label: Optional[str] = Field(
        None, description='Name of the label if this is a label permission'
    )
    exclusive: Optional[bool] = Field(
        None, description='Whether this permission is exclusive'
    )


class Options(BaseModel):
    """
    Group options
    """

    visible_to_all: Optional[bool] = Field(
        None, description='Whether the group is visible to all users'
    )


class Groups(BaseModel):
    """
    Group information
    """

    url: Optional[str] = Field(None, description='URL to the group')
    options: Optional[Options] = Field(None, description='Group options')
    description: Optional[str] = Field(None, description='Description of the group')


class Local(BaseModel):
    """
    Access section keyed by ref pattern
    """

    permissions: Optional[dict[str, Permissions]] = Field(
        None, description='Permissions in this section'
    )
    groups: Optional[dict[str, Groups]] = Field(
        None, description='Groups used in the access section'
    )


class AccessRightsInfo(BaseModel):
    """
    Access rights information for projects
    """

    revision: Optional[str] = Field(
        None,
        description='Configuration revision as base64 encoded SHA1 of the refs/meta/config branch',
    )
    inheritsFrom: Optional[InheritsFrom] = Field(
        None, description='Project from which these access rights are inherited'
    )
    local: Optional[dict[str, Local]] = Field(
        None, description='Access sections for this project'
    )
