# generated by datamodel-codegen:
#   filename:  /workspaces/pydantic-gerrit/schemas/v3_12/../../schemas/v3_12/projects.json
#   timestamp: 2025-09-16T21:42:27+00:00

from __future__ import annotations

from enum import Enum
from typing import Any

from pydantic import BaseModel, Field, RootModel


class State(Enum):
    """
    The state of the project
    """

    ACTIVE = 'ACTIVE'
    READ_ONLY = 'READ_ONLY'
    HIDDEN = 'HIDDEN'


class WebLink(BaseModel):
    name: str | None = Field(None, description='The name of the link')
    url: str | None = Field(None, description='The URL of the link')
    target: str | None = Field(None, description='The target of the link')


class SubmitType(Enum):
    """
    The submit type for the project
    """

    MERGE_IF_NECESSARY = 'MERGE_IF_NECESSARY'
    FAST_FORWARD_ONLY = 'FAST_FORWARD_ONLY'
    REBASE_IF_NECESSARY = 'REBASE_IF_NECESSARY'
    REBASE_ALWAYS = 'REBASE_ALWAYS'
    MERGE_ALWAYS = 'MERGE_ALWAYS'
    CHERRY_PICK = 'CHERRY_PICK'


class Commentlinks(BaseModel):
    match: str | None = Field(None, description='Regular expression to match comments')
    link: str | None = Field(None, description='Link template')
    html: str | None = Field(None, description='HTML template')
    enabled: bool | None = Field(None, description='Whether the comment link is enabled')


class Actions(BaseModel):
    method: str | None = Field(None, description='HTTP method to use')
    label: str | None = Field(None, description='Short description of the action')
    title: str | None = Field(None, description='Longer description of the action')
    enabled: bool | None = Field(None, description='Whether the action is enabled')


class Config(BaseModel):
    """
    The project configuration
    """

    max_object_size_limit: str | None = Field(None, description='Maximum allowed Git object size')
    submit_type: SubmitType | None = Field(None, description='The submit type for the project')
    state: State | None = Field(None, description='The state of the project')
    commentlinks: dict[str, Commentlinks] | None = Field(None, description='Comment link configuration')
    plugin_config: dict[str, Any] | None = Field(None, description='Plugin-specific configuration')
    actions: dict[str, Actions] | None = Field(None, description='Actions that can be executed on the project')


class ProjectInfo(RootModel[Any]):
    root: Any


class LabelInfo(RootModel[Any]):
    root: Any


class BranchInfo(RootModel[Any]):
    root: Any


class ProjectInfoModel(BaseModel):
    """
    Project information from Gerrit
    """

    id: str = Field(..., description='The URL encoded project name')
    name: str = Field(..., description='The name of the project')
    parent: ProjectInfo | None = Field(None, description='The parent project')
    description: str | None = Field(None, description='The description of the project')
    state: State | None = Field(None, description='The state of the project')
    labels: dict[str, LabelInfo] | None = Field(None, description='The labels that are configured for the project')
    web_links: list[WebLink] | None = Field(None, description='Links to the project in external systems')
    themes: list[str] | None = Field(None, description='The list of theme names for the project')
    branches: list[BranchInfo] | None = Field(None, description='The list of branches in the project')
    config: Config | None = Field(None, description='The project configuration')
