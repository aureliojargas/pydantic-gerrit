# generated by datamodel-codegen:
#   filename:  /workspaces/pydantic-gerrit/schemas/v3_12/../../schemas/v3_12/revisions.json
#   timestamp: 2025-09-16T20:49:32+00:00

from __future__ import annotations

from enum import Enum
from typing import Any, Optional

from pydantic import AwareDatetime, BaseModel, Field, RootModel


class Kind(Enum):
    """
    The change kind
    """

    REWORK = 'REWORK'
    TRIVIAL_REBASE = 'TRIVIAL_REBASE'
    MERGE_FIRST_PARENT_UPDATE = 'MERGE_FIRST_PARENT_UPDATE'
    NO_CODE_CHANGE = 'NO_CODE_CHANGE'
    NO_CHANGE = 'NO_CHANGE'


class Fetch(BaseModel):
    url: Optional[str] = None
    ref: Optional[str] = None
    commands: Optional[dict[str, str]] = None


class AccountInfo(RootModel[Any]):
    root: Any


class CommitInfo(RootModel[Any]):
    root: Any


class FileInfo(RootModel[Any]):
    root: Any


class RevisionInfo(BaseModel):
    """
    Information about a specific revision of a change
    """

    kind: Optional[Kind] = Field(None, description='The change kind')
    number: Optional[int] = Field(None, description='The patch set number')
    created: Optional[AwareDatetime] = Field(
        None, description='The timestamp of when the patch set was created'
    )
    uploader: Optional[AccountInfo] = Field(
        None, description='The uploader of the patch set'
    )
    ref: Optional[str] = Field(None, description='The Git reference for the patch set')
    fetch: Optional[dict[str, Fetch]] = Field(
        None, description='Information for fetching this patch set'
    )
    commit: Optional[CommitInfo] = Field(
        None, description='The commit of this revision'
    )
    files: Optional[dict[str, FileInfo]] = Field(
        None, description='The files in the patch set'
    )
