# generated by datamodel-codegen:
#   filename:  /workspaces/pydantic-gerrit/schemas/v3_12/../../schemas/v3_12/changes.json
#   timestamp: 2025-09-16T21:42:27+00:00

from __future__ import annotations

from enum import Enum
from typing import Any

from pydantic import AwareDatetime, BaseModel, Field, RootModel


class Status(Enum):
    """
    The status of the change
    """

    NEW = 'NEW'
    MERGED = 'MERGED'
    ABANDONED = 'ABANDONED'
    DRAFT = 'DRAFT'


class AccountInfo(RootModel[Any]):
    root: Any


class LabelInfo(RootModel[Any]):
    root: Any


class RevisionInfo(RootModel[Any]):
    root: Any


class ChangeInfo(RootModel[Any]):
    root: Any


class Reviewers(BaseModel):
    """
    The reviewers of the change
    """

    REVIEWER: list[AccountInfo] | None
    CC: list[AccountInfo] | None
    REMOVED: list[AccountInfo] | None


class AllItem(BaseModel):
    value: int | None
    date: AwareDatetime | None
    account: AccountInfo | None


class Labels(BaseModel):
    approved: AccountInfo | None
    rejected: AccountInfo | None
    recommended: AccountInfo | None
    disliked: AccountInfo | None
    value: int | None = Field(None, description='The voting value')
    default_value: int | None = Field(None, description='The default voting value')
    values: dict[str, Any] | None = Field(
        None, description='Maps the vote values (-2, -1, 0, +1, +2) to their descriptions'
    )
    all: list[AllItem] | None


class Message(BaseModel):
    id: str | None
    author: AccountInfo | None
    date: AwareDatetime | None
    message: str | None
    tag: str | None


class AttentionSet(BaseModel):
    account: AccountInfo | None
    last_update: AwareDatetime | None
    reason: str | None


class PendingReviewers(BaseModel):
    """
    The reviewers that need to be added
    """

    REVIEWER: list[AccountInfo] | None
    CC: list[AccountInfo] | None


class ChangeInfoModel(BaseModel):
    """
    Change information from Gerrit
    """

    id: str = Field(..., description='The ID of the change in the format "<project>~<branch>~<Change-Id>"')
    project: str = Field(..., description='The name of the project')
    branch: str = Field(..., description='The name of the target branch')
    topic: str | None = Field(None, description='The topic to which this change belongs')
    change_id: str = Field(..., description='The Change-Id of the change')
    subject: str | None = Field(None, description='The subject of the change (header line of the commit message)')
    status: Status | None = Field(None, description='The status of the change')
    created: AwareDatetime | None = Field(None, description='The timestamp of when the change was created')
    updated: AwareDatetime | None = Field(None, description='The timestamp of when the change was last updated')
    submitted: AwareDatetime | None = Field(None, description='The timestamp of when the change was submitted')
    submitter: AccountInfo | None
    owner: AccountInfo | None
    reviewers: Reviewers | None = Field(None, description='The reviewers of the change')
    labels: dict[str, Labels] | None = Field(None, description='The labels of the change')
    permitted_labels: dict[str, list[str]] | None = Field(
        None, description='The labels that are permitted for the change'
    )
    removable_reviewers: list[AccountInfo] | None = Field(None, description='The list of reviewers that can be removed')
    messages: list[Message] | None = Field(None, description='The messages associated with the change')
    current_revision: str | None = Field(None, description='The SHA-1 of current patch set')
    revisions: dict[str, RevisionInfo] | None = Field(None, description='All patch sets of this change')
    hashtags: list[str] | None = Field(None, description='The hashtags associated with the change')
    related_changes: list[ChangeInfo] | None = Field(None, description='Related changes')
    attention_set: dict[str, AttentionSet] | None = Field(None, description='The users in the attention set')
    pending_reviewers: PendingReviewers | None = Field(None, description='The reviewers that need to be added')
    work_in_progress: bool | None = Field(None, description='Whether the change is work in progress')
    private: bool | None = Field(None, description='Whether the change is private')
    is_private: bool | None = Field(None, description='Whether the change is private')
    review_started: bool | None = Field(None, description='Whether the review has been started')
