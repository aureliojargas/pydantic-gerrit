# generated by datamodel-codegen:
#   filename:  /workspaces/pydantic-gerrit/schemas/v3_12/../../schemas/v3_12/changes.json
#   timestamp: 2025-09-16T20:49:32+00:00

from __future__ import annotations

from enum import Enum
from typing import Any, Optional

from pydantic import AwareDatetime, BaseModel, Field, RootModel


class Status(Enum):
    """
    The status of the change
    """

    NEW = 'NEW'
    MERGED = 'MERGED'
    ABANDONED = 'ABANDONED'
    DRAFT = 'DRAFT'


class AccountInfo(RootModel[Any]):
    root: Any


class LabelInfo(RootModel[Any]):
    root: Any


class RevisionInfo(RootModel[Any]):
    root: Any


class ChangeInfo(RootModel[Any]):
    root: Any


class Reviewers(BaseModel):
    """
    The reviewers of the change
    """

    REVIEWER: Optional[list[AccountInfo]] = None
    CC: Optional[list[AccountInfo]] = None
    REMOVED: Optional[list[AccountInfo]] = None


class AllItem(BaseModel):
    value: Optional[int] = None
    date: Optional[AwareDatetime] = None
    account: Optional[AccountInfo] = None


class Labels(BaseModel):
    approved: Optional[AccountInfo] = None
    rejected: Optional[AccountInfo] = None
    recommended: Optional[AccountInfo] = None
    disliked: Optional[AccountInfo] = None
    value: Optional[int] = Field(None, description='The voting value')
    default_value: Optional[int] = Field(None, description='The default voting value')
    values: Optional[dict[str, Any]] = Field(
        None,
        description='Maps the vote values (-2, -1, 0, +1, +2) to their descriptions',
    )
    all: Optional[list[AllItem]] = None


class Message(BaseModel):
    id: Optional[str] = None
    author: Optional[AccountInfo] = None
    date: Optional[AwareDatetime] = None
    message: Optional[str] = None
    tag: Optional[str] = None


class AttentionSet(BaseModel):
    account: Optional[AccountInfo] = None
    last_update: Optional[AwareDatetime] = None
    reason: Optional[str] = None


class PendingReviewers(BaseModel):
    """
    The reviewers that need to be added
    """

    REVIEWER: Optional[list[AccountInfo]] = None
    CC: Optional[list[AccountInfo]] = None


class ChangeInfoModel(BaseModel):
    """
    Change information from Gerrit
    """

    id: str = Field(
        ...,
        description='The ID of the change in the format "<project>~<branch>~<Change-Id>"',
    )
    project: str = Field(..., description='The name of the project')
    branch: str = Field(..., description='The name of the target branch')
    topic: Optional[str] = Field(
        None, description='The topic to which this change belongs'
    )
    change_id: str = Field(..., description='The Change-Id of the change')
    subject: Optional[str] = Field(
        None,
        description='The subject of the change (header line of the commit message)',
    )
    status: Optional[Status] = Field(None, description='The status of the change')
    created: Optional[AwareDatetime] = Field(
        None, description='The timestamp of when the change was created'
    )
    updated: Optional[AwareDatetime] = Field(
        None, description='The timestamp of when the change was last updated'
    )
    submitted: Optional[AwareDatetime] = Field(
        None, description='The timestamp of when the change was submitted'
    )
    submitter: Optional[AccountInfo] = None
    owner: Optional[AccountInfo] = None
    reviewers: Optional[Reviewers] = Field(
        None, description='The reviewers of the change'
    )
    labels: Optional[dict[str, Labels]] = Field(
        None, description='The labels of the change'
    )
    permitted_labels: Optional[dict[str, list[str]]] = Field(
        None, description='The labels that are permitted for the change'
    )
    removable_reviewers: Optional[list[AccountInfo]] = Field(
        None, description='The list of reviewers that can be removed'
    )
    messages: Optional[list[Message]] = Field(
        None, description='The messages associated with the change'
    )
    current_revision: Optional[str] = Field(
        None, description='The SHA-1 of current patch set'
    )
    revisions: Optional[dict[str, RevisionInfo]] = Field(
        None, description='All patch sets of this change'
    )
    hashtags: Optional[list[str]] = Field(
        None, description='The hashtags associated with the change'
    )
    related_changes: Optional[list[ChangeInfo]] = Field(
        None, description='Related changes'
    )
    attention_set: Optional[dict[str, AttentionSet]] = Field(
        None, description='The users in the attention set'
    )
    pending_reviewers: Optional[PendingReviewers] = Field(
        None, description='The reviewers that need to be added'
    )
    work_in_progress: Optional[bool] = Field(
        None, description='Whether the change is work in progress'
    )
    private: Optional[bool] = Field(None, description='Whether the change is private')
    is_private: Optional[bool] = Field(
        None, description='Whether the change is private'
    )
    review_started: Optional[bool] = Field(
        None, description='Whether the review has been started'
    )
